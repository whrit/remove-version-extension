{"version":3,"file":"extension.js","mappings":"8bAAA,eAEA,IAAIA,EAEJ,SAASC,IACL,MAAMC,EAASC,EAAOC,OAAOC,iBACzBH,GAAUA,EAAOI,SAASC,SAASC,SAAS,oBAC5CR,EAAcS,OAEdT,EAAcU,MAEtB,CAEA,oBAAyBC,GAErBX,EAAgBG,EAAOC,OAAOQ,oBAAoBT,EAAOU,mBAAmBC,MAAO,KACnFd,EAAce,KAAO,8BACrBf,EAAcgB,QAAU,kDACxBhB,EAAciB,QAAU,mDACxBN,EAAQO,cAAcC,KAAKnB,GAG3B,IAAIoB,EAAajB,EAAOkB,SAASC,gBAAgB,oDAAoD,IAAY,EAAD,gCAC5G,MAAMpB,EAASC,EAAOC,OAAOC,iBAC7B,GAAIH,EAAQ,CACR,MAAMI,EAAWJ,EAAOI,SACxB,GAAIA,EAASC,SAASC,SAAS,oBAAqB,CAChD,MACMe,EADOjB,EAASkB,UACDC,QAAQ,4BAA6B,UAEpDvB,EAAOwB,MAAKC,IACd,MAAMC,EAAQ,IAAIzB,EAAO0B,SAAS,EAAG,GAC/BC,EAAMxB,EAASyB,OAAOzB,EAAS0B,UAAY,GAAGC,MAAMH,IAC1DH,EAAYF,QAAQ,IAAItB,EAAO+B,MAAMN,EAAOE,GAAMP,EAAQ,IAE9DpB,EAAOC,OAAO+B,uBAAuB,2C,MAErChC,EAAOC,OAAOgC,iBAAiB,uC,MAGnCjC,EAAOC,OAAOgC,iBAAiB,0BAEvC,MAEAzB,EAAQO,cAAcC,KAAKC,GAG3BT,EAAQO,cAAcC,KAClBhB,EAAOC,OAAOiC,6BAA4B,KACtCpC,GAA2B,KAKnCA,GACJ,EAEA,wBACQD,GACAA,EAAcsC,SAEtB,C,UC7DAC,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":[".././src/extension.ts","../external commonjs \"vscode\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\n\nlet statusBarItem: vscode.StatusBarItem;\n\nfunction updateStatusBarVisibility(): void {\n    const editor = vscode.window.activeTextEditor;\n    if (editor && editor.document.fileName.endsWith('requirements.txt')) {\n        statusBarItem.show();\n    } else {\n        statusBarItem.hide();\n    }\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n    // Create status bar item\n    statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);\n    statusBarItem.text = \"$(versions) Remove Versions\"; // Uses the VS Code versions icon\n    statusBarItem.tooltip = \"Remove version specifiers from requirements.txt\";\n    statusBarItem.command = 'remove-version-extension.removeVersionSpecifiers';\n    context.subscriptions.push(statusBarItem);\n\n    // Register the command\n    let disposable = vscode.commands.registerCommand('remove-version-extension.removeVersionSpecifiers', async () => {\n        const editor = vscode.window.activeTextEditor;\n        if (editor) {\n            const document = editor.document;\n            if (document.fileName.endsWith('requirements.txt')) {\n                const text = document.getText();\n                const newText = text.replace(/[=~><]=?[\\d.]+|@[\\w\\d.]+/g, '');\n                \n                await editor.edit(editBuilder => {\n                    const start = new vscode.Position(0, 0);\n                    const end = document.lineAt(document.lineCount - 1).range.end;\n                    editBuilder.replace(new vscode.Range(start, end), newText);\n                });\n                vscode.window.showInformationMessage('Version specifiers removed successfully.');\n            } else {\n                vscode.window.showErrorMessage('Please open a requirements.txt file.');\n            }\n        } else {\n            vscode.window.showErrorMessage('No active editor found.');\n        }\n    });\n\n    context.subscriptions.push(disposable);\n\n    // Update status bar item visibility when the active editor changes\n    context.subscriptions.push(\n        vscode.window.onDidChangeActiveTextEditor(() => {\n            updateStatusBarVisibility();\n        })\n    );\n\n    // Initial visibility update\n    updateStatusBarVisibility();\n}\n\nexport function deactivate() {\n    if (statusBarItem) {\n        statusBarItem.dispose();\n    }\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["statusBarItem","updateStatusBarVisibility","editor","vscode","window","activeTextEditor","document","fileName","endsWith","show","hide","context","createStatusBarItem","StatusBarAlignment","Right","text","tooltip","command","subscriptions","push","disposable","commands","registerCommand","newText","getText","replace","edit","editBuilder","start","Position","end","lineAt","lineCount","range","Range","showInformationMessage","showErrorMessage","onDidChangeActiveTextEditor","dispose","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}